{"version":3,"sources":["App.js","serviceWorker.js","index.js","spinner.png"],"names":["PredictionButton","props","react_default","a","createElement","className","onClick","UploadButton","displayText","UploadInput","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","nextprops","shouldUpdate","_this","type","onChange","event","Component","App","_this2","state","fileSelected","file","undefined","predicting","prediction","failed","probability","serverOnline","handleInputClick","bind","assertThisInitialized","handlePredictClick","status","setState","_this3","axios","get","timeout","then","response","console","log","changeServerStatus","error","target","files","fileURL","URL","createObjectURL","pingServer","_this4","fd","FormData","append","name","post","res","resData","data","Failed","Reason","Prediction","Probability","fileName","length","substring","src","spinner","alt","_this$decideDisplayTe","decideDisplayText","_this$decideDisplayTe2","slicedToArray","href","App_UploadInput","renderPredictButton","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"+RAMA,SAASA,EAAiBC,GACxB,OAAOC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,qBAAqBC,QAASL,EAAMK,SAAtD,WAKT,SAASC,EAAaN,GACpB,OAAOC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,kBAAkBJ,EAAMO,iBAG7CC,cACJ,SAAAA,EAAYR,GAAQ,OAAAS,OAAAC,EAAA,EAAAD,CAAAE,KAAAH,GAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAD,GAAAM,KAAAH,KACZX,uFAGce,GACpB,OAAOA,EAAUC,8CAGV,IAAAC,EAAAN,KACP,OAAOV,EAAAC,EAAAC,cAAA,SAAOe,KAAK,OAAOd,UAAU,YAClCe,SAAU,SAACC,GAAYH,EAAKjB,MAAMK,QAAQe,aAXtBC,aAiLXC,cAjKb,SAAAA,EAAYtB,GAAO,IAAAuB,EAAA,OAAAd,OAAAC,EAAA,EAAAD,CAAAE,KAAAW,IACjBC,EAAAd,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAa,GAAAR,KAAAH,KAAMX,KACDwB,MAAQ,CACXC,cAAc,EACdC,UAAMC,EACNC,YAAY,EACZC,WAAY,OACZC,YAAQH,EACRI,iBAAaJ,EACbK,cAAc,GAGhBT,EAAKU,iBAAmBV,EAAKU,iBAAiBC,KAAtBzB,OAAA0B,EAAA,EAAA1B,QAAA0B,EAAA,EAAA1B,CAAAc,KACxBA,EAAKa,mBAAqBb,EAAKa,mBAAmBF,KAAxBzB,OAAA0B,EAAA,EAAA1B,QAAA0B,EAAA,EAAA1B,CAAAc,KAbTA,kFAgBAc,GACjB1B,KAAK2B,SAAS,CAAEN,aAAcK,yCAGnB,IAAAE,EAAA5B,KACX6B,IAAMC,IAAI,iCAAkC,CAAEC,QAAS,OAAcC,KAAK,SAACC,GACzEC,QAAQC,IAAIF,GACY,MAApBA,EAASP,OACXE,EAAKQ,oBAAmB,IAExBF,QAAQC,IAAI,6BACZP,EAAKQ,oBAAmB,KAEzB,SAACC,GACFH,QAAQC,IAAI,8BACZP,EAAKQ,oBAAmB,8CAIX3B,GACf,IACET,KAAK2B,SAAS,CACZb,cAAc,EACdC,KAAMN,EAAM6B,OAAOC,MAAM,GACzBC,QAASC,IAAIC,gBAAgBjC,EAAM6B,OAAOC,MAAM,IAChDtB,YAAY,EACZC,WAAY,OACZC,YAAQH,EACRI,iBAAaJ,EACbK,cAAc,IAEhBrB,KAAK2C,aAEL,MAAON,kDAIU,IAAAO,EAAA5C,KACnBA,KAAK2B,SAAS,CAAEV,YAAY,IAC5B,IAAM4B,EAAK,IAAIC,SACfD,EAAGE,OAAO,QAAS/C,KAAKa,MAAME,KAAMf,KAAKa,MAAME,KAAKiC,MACpDd,QAAQC,IAAI,UACZN,IAAMoB,KAAK,oDAAqDJ,GAC7Db,KAAK,SAACkB,GACL,IAAMC,EAAUD,EAAIE,KAChBD,EAAQE,OACVT,EAAKjB,SAAS,CACZV,YAAY,EACZE,OAAQgC,EAAQG,SAGlBV,EAAKjB,SAAS,CACZV,YAAY,EACZC,WAAYiC,EAAQI,WACpBnC,YAAa+B,EAAQK,4DAO7B,IAAInD,EACAT,EACJ,GAAII,KAAKa,MAAMC,aAAc,CAC3BT,GAAe,EACf,IAAIoD,EAAWzD,KAAKa,MAAME,KAAKiC,KAC3BS,EAASC,OAAS,KACpBD,EAAWA,EAASE,UAAU,EAAG,GAAK,MACpCF,EAASE,UAAUF,EAASC,OAAS,IAEzC9D,EAAc,aAAe6D,OAE7BpD,GAAe,EACfT,EAAc,kBAEhB,MAAO,CAACS,EAAcT,iDAKtB,OADAsC,QAAQC,IAAInC,KAAKa,MAAMQ,cACnBrB,KAAKa,MAAMM,OACL7B,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,oBAAH,YAA2BQ,KAAKa,MAAMM,QACX,SAA1BnB,KAAKa,MAAMK,WACZ5B,EAAAC,EAAAC,cAAA,8BAAqBF,EAAAC,EAAAC,cAAA,SAAIQ,KAAKa,MAAMK,WAAf,KAArB,oBACW5B,EAAAC,EAAAC,cAAA,SAAIQ,KAAKa,MAAMO,cAExBpB,KAAKa,MAAMC,aAEXd,KAAKa,MAAMQ,aAMZrB,KAAKa,MAAMI,WACZ3B,EAAAC,EAAAC,cAAA,WACNF,EAAAC,EAAAC,cAAA,OAAKoE,IAAKC,IAASpE,UAAU,cAAcqE,IAAI,KAC/CxE,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,sDAGMF,EAAAC,EAAAC,cAACJ,EAAD,CAAkBM,QAASM,KAAKyB,qBAZhCnC,EAAAC,EAAAC,cAAA,WACNF,EAAAC,EAAAC,cAAA,OAAKoE,IAAKC,IAASpE,UAAU,cAAcqE,IAAI,KAC/CxE,EAAAC,EAAAC,cAAA,iFACAF,EAAAC,EAAAC,cAAA,2EALF,mCAmBF,IAAIa,EACAT,EAFGmE,EAGuB/D,KAAKgE,oBAH5BC,EAAAnE,OAAAoE,EAAA,EAAApE,CAAAiE,EAAA,GAKP,OAFC1D,EAHM4D,EAAA,GAGQrE,EAHRqE,EAAA,GAML3E,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,KACD2E,KAAK,qDADJ,gCAKH7E,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAC4E,EAAD,CAAa/D,aAAcA,EACzBX,QAASM,KAAKsB,mBAChBhC,EAAAC,EAAAC,cAACG,EAAD,CAAcC,YAAaA,KAE7BN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACZO,KAAKa,MAAMC,cACVxB,EAAAC,EAAAC,cAAA,OAAKoE,IAAK5D,KAAKa,MAAM2B,QAASsB,IAAK9D,KAAKa,MAAM4C,SAC5ChE,UAAU,kBAGdH,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BACZO,KAAKqE,iCAtJF3D,aCnBE4D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOtF,EAAAC,EAAAC,cAACqF,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlD,KAAK,SAAAmD,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.c117dc67.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport '../node_modules/bootstrap/dist/css/bootstrap.css';\nimport './App.css';\nimport spinner from './spinner.png';\nimport axios from 'axios'\n\nfunction PredictionButton(props) {\n  return <button className=\"btn Predict-button\" onClick={props.onClick}\n  >Predict\n        </button>\n}\n\nfunction UploadButton(props) {\n  return <button className=\"btn App-button\">{props.displayText}</button>\n}\n\nclass UploadInput extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  shouldComponentUpdate(nextprops) {\n    return nextprops.shouldUpdate;\n  }\n\n  render() {\n    return <input type=\"file\" className=\"App-input\"\n      onChange={(event) => { this.props.onClick(event) }} />\n  }\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      fileSelected: false,\n      file: undefined,\n      predicting: false,\n      prediction: \"None\",\n      failed: undefined,\n      probability: undefined,\n      serverOnline: false\n\n    }\n    this.handleInputClick = this.handleInputClick.bind(this);\n    this.handlePredictClick = this.handlePredictClick.bind(this);\n  }\n\n  changeServerStatus(status) {\n    this.setState({ serverOnline: status })\n  }\n\n  pingServer() {\n    axios.get('https://pvb-api.herokuapp.com/', { timeout: 1000 * 150 }).then((response) => {\n      console.log(response)\n      if (response.status === 404) {\n        this.changeServerStatus(false)\n      } else {\n        console.log(\"Changing server to online\")\n        this.changeServerStatus(true)\n      }\n    }, (error) => {\n      console.log(\"Changing server to offline\")\n      this.changeServerStatus(false)\n    })\n  }\n\n  handleInputClick(event) {\n    try {\n      this.setState({\n        fileSelected: true,\n        file: event.target.files[0],\n        fileURL: URL.createObjectURL(event.target.files[0]),\n        predicting: false,\n        prediction: \"None\",\n        failed: undefined,\n        probability: undefined,\n        serverOnline: false\n      });\n      this.pingServer()\n\n    } catch (error) {\n    }\n  }\n\n  handlePredictClick() {\n    this.setState({ predicting: true });\n    const fd = new FormData();\n    fd.append('image', this.state.file, this.state.file.name);\n    console.log(\"yeet11\");\n    axios.post('https://pvb-api.herokuapp.com/api/make_prediction', fd)\n      .then((res) => {\n        const resData = res.data;\n        if (resData.Failed) {\n          this.setState({\n            predicting: false,\n            failed: resData.Reason,\n          });\n        } else {\n          this.setState({\n            predicting: false,\n            prediction: resData.Prediction,\n            probability: resData.Probability\n          });\n        }\n      })\n  }\n\n  decideDisplayText() {\n    var shouldUpdate;\n    var displayText;\n    if (this.state.fileSelected) {\n      shouldUpdate = false;\n      var fileName = this.state.file.name;\n      if (fileName.length > 12) {\n        fileName = fileName.substring(0, 6) + '...' +\n          fileName.substring(fileName.length - 8);\n      }\n      displayText = \"Selected: \" + fileName;\n    } else {\n      shouldUpdate = true;\n      displayText = \"Choose an image\"\n    }\n    return [shouldUpdate, displayText];\n  }\n\n  renderPredictButton() {\n    console.log(this.state.serverOnline)\n    if (this.state.failed) {\n      return (<p><b>Failed.</b> Reason: {this.state.failed}</p>)\n    } else if (this.state.prediction !== \"None\") {\n      return (<p>I think this is a <b>{this.state.prediction} </b>\n        with probability <b>{this.state.probability}</b>\n      </p>)\n    } else if (!this.state.fileSelected) {\n      return\n    } else if (!this.state.serverOnline) {\n      return (<div>\n        <img src={spinner} className=\"App-spinner\" alt=\"\" />\n        <p>Waiting for AI to start (try refreshing after a minute if no change)</p>\n        <p>Life is hard when you don't have money for 24/7 backends</p>\n      </div>)\n    } else if (this.state.predicting) {\n      return (<div>\n        <img src={spinner} className=\"App-spinner\" alt=\"\" />\n        <p>Predicting...</p>\n        <p>This may take a moment for larger images</p>\n      </div>)\n    } else {\n      return (<PredictionButton onClick={this.handlePredictClick} />)\n    }\n  }\n\n  render() {\n    var shouldUpdate;\n    var displayText;\n    [shouldUpdate, displayText] = this.decideDisplayText();\n\n    return (\n      <div className=\"App\">\n        <br></br>\n\n        <p><a\n          href=\"https://github.com/Nanway/pug_vs_bulldog_frontend\">\n          GitHub repo and explanation\n          </a>\n        </p>\n        <div className=\"navbar-nav\">\n          <div className=\"Upload-block\">\n            <UploadInput shouldUpdate={shouldUpdate}\n              onClick={this.handleInputClick} />\n            <UploadButton displayText={displayText} />\n          </div>\n          <div className=\"Upload-Image\">\n            {this.state.fileSelected &&\n              <img src={this.state.fileURL} alt={this.state.fileName}\n                className=\"Display-Image\"\n              />\n            }\n            <br></br>\n            <div className=\"Predict-button-container\">\n              {this.renderPredictButton()}\n            </div>\n          </div>\n\n        </div>\n      </div>\n    )\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/spinner.9d11778c.png\";"],"sourceRoot":""}